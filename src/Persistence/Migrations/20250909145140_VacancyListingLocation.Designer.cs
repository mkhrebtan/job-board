// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250909145140_VacancyListingLocation")]
    partial class VacancyListingLocation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Contexts.ApplicationContext.Aggregates.VacancyApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("SeekerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.HasIndex("SeekerId", "VacancyId")
                        .IsUnique();

                    b.ToTable("VacancyApplications", "Application");

                    b.HasDiscriminator<string>("ApplicationType").HasValue("VacancyApplication");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Contexts.IdentityContext.Aggregates.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens", "Identity");
                });

            modelBuilder.Entity("Domain.Contexts.IdentityContext.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "Domain.Contexts.IdentityContext.Aggregates.User.PhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.Property<string>("RegionCode")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Domain.Contexts.JobPostingContext.Aggregates.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Categories", "JobPosting");
                });

            modelBuilder.Entity("Domain.Contexts.JobPostingContext.Aggregates.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Domain.Contexts.JobPostingContext.Aggregates.Vacancy.Description#RichTextContent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Markdown")
                                .IsRequired()
                                .HasMaxLength(50000)
                                .HasColumnType("character varying(50000)");

                            b1.Property<string>("PlainText")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Location", "Domain.Contexts.JobPostingContext.Aggregates.Vacancy.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("District")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<decimal?>("Latitude")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Longitude")
                                .HasColumnType("numeric");

                            b1.Property<string>("Region")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RecruiterInfo", "Domain.Contexts.JobPostingContext.Aggregates.Vacancy.RecruiterInfo#RecruiterInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "Domain.Contexts.JobPostingContext.Aggregates.Vacancy.RecruiterInfo#RecruiterInfo.PhoneNumber#PhoneNumber", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(15)
                                        .HasColumnType("character varying(15)");

                                    b2.Property<string>("RegionCode")
                                        .IsRequired()
                                        .HasMaxLength(2)
                                        .HasColumnType("character varying(2)");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Salary", "Domain.Contexts.JobPostingContext.Aggregates.Vacancy.Salary#Salary", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("MaxAmount")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("MinAmount")
                                .HasColumnType("numeric");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Domain.Contexts.JobPostingContext.Aggregates.Vacancy.Title#VacancyTitle", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Vacancies", "JobPosting");
                });

            modelBuilder.Entity("Domain.Contexts.RecruitmentContext.Aggregates.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Domain.Contexts.RecruitmentContext.Aggregates.Company.Description#RichTextContent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Markdown")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PlainText")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("Companies", "Recruitment");
                });

            modelBuilder.Entity("Domain.Contexts.RecruitmentContext.Aggregates.CompanyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RecruiterId")
                        .IsUnique();

                    b.ToTable("CompanyUsers", "Recruitment");
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Aggregates.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DesiredPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmploymentTypes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SeekerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkArrangements")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.ComplexProperty<Dictionary<string, object>>("ContactInfo", "Domain.Contexts.ResumePostingContext.Aggregates.Resume.ContactInfo#ContactInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "Domain.Contexts.ResumePostingContext.Aggregates.Resume.ContactInfo#ContactInfo.PhoneNumber#PhoneNumber", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasMaxLength(15)
                                        .HasColumnType("character varying(15)");

                                    b2.Property<string>("RegionCode")
                                        .IsRequired()
                                        .HasMaxLength(2)
                                        .HasColumnType("character varying(2)");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Location", "Domain.Contexts.ResumePostingContext.Aggregates.Resume.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("District")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<decimal?>("Latitude")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Longitude")
                                .HasColumnType("numeric");

                            b1.Property<string>("Region")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PersonalInfo", "Domain.Contexts.ResumePostingContext.Aggregates.Resume.PersonalInfo#PersonalInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SalaryExpectation", "Domain.Contexts.ResumePostingContext.Aggregates.Resume.SalaryExpectation#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SkillsDescription", "Domain.Contexts.ResumePostingContext.Aggregates.Resume.SkillsDescription#RichTextContent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Markdown")
                                .IsRequired()
                                .HasMaxLength(50000)
                                .HasColumnType("character varying(50000)");

                            b1.Property<string>("PlainText")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SeekerId");

                    b.ToTable("Resumes", "ResumePosting");
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Entities.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Domain.Contexts.ResumePostingContext.Entities.Education.DateRange#DateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations", "ResumePosting");
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Entities.LanguageSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("LanguageSkills", "ResumePosting");
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Entities.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Domain.Contexts.ResumePostingContext.Entities.WorkExperience.DateRange#DateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Domain.Contexts.ResumePostingContext.Entities.WorkExperience.Description#RichTextContent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Markdown")
                                .IsRequired()
                                .HasMaxLength(50000)
                                .HasColumnType("character varying(50000)");

                            b1.Property<string>("PlainText")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkExperiences", "ResumePosting");
                });

            modelBuilder.Entity("Domain.ReadModels.Resumes.ResumeListingReadModel", b =>
                {
                    b.Property<Guid>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("EmploymentTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal?>("ExpectedSalary")
                        .HasColumnType("numeric");

                    b.Property<string>("ExpectedSalaryCurrency")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalMonthsOfExperience")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("WorkArrangements")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("ResumeId");

                    b.HasIndex("City");

                    b.HasIndex("Country");

                    b.HasIndex("District");

                    b.HasIndex("Region");

                    b.ToTable("ResumeListing", "Read");
                });

            modelBuilder.Entity("Domain.ReadModels.Resumes.UserResumesReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserResumes", "Read");
                });

            modelBuilder.Entity("Domain.ReadModels.Vacancies.CompanyVacanciesReadModel", b =>
                {
                    b.Property<Guid>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("text");

                    b.Property<decimal?>("SalaryFrom")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SalaryTo")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VacancyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("City");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Country");

                    b.HasIndex("District");

                    b.HasIndex("Region");

                    b.HasIndex("Status");

                    b.ToTable("CompanyVacancies", "Read");
                });

            modelBuilder.Entity("Domain.ReadModels.Vacancies.RegisteredVacanciesReadModel", b =>
                {
                    b.Property<Guid>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VacancyId");

                    b.ToTable("RegisteredVacancies", "Read");
                });

            modelBuilder.Entity("Domain.ReadModels.Vacancies.VacancyApplicationsReadModel", b =>
                {
                    b.Property<Guid>("VacancyApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResumeTitle")
                        .HasColumnType("text");

                    b.Property<string>("SeekerFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeekerLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("VacancyApplicationId");

                    b.HasIndex("ResumeId")
                        .HasDatabaseName("IX_VacancyApplications_ResumeId1");

                    b.HasIndex("VacancyId")
                        .HasDatabaseName("IX_VacancyApplications_VacancyId1");

                    b.ToTable("VacancyApplications", "Read");
                });

            modelBuilder.Entity("Domain.ReadModels.Vacancies.VacancyListingReadModel", b =>
                {
                    b.Property<Guid>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyLogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionPlainText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("text");

                    b.Property<decimal?>("SalaryFrom")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SalaryTo")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VacancyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("City");

                    b.HasIndex("Country");

                    b.HasIndex("District");

                    b.HasIndex("Region");

                    b.ToTable("VacancyListing", "Read");
                });

            modelBuilder.Entity("Domain.Contexts.ApplicationContext.Aggregates.FileVacancyApplication", b =>
                {
                    b.HasBaseType("Domain.Contexts.ApplicationContext.Aggregates.VacancyApplication");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasDiscriminator().HasValue("WithFile");
                });

            modelBuilder.Entity("Domain.Contexts.ApplicationContext.Aggregates.ResumeVacancyApplication", b =>
                {
                    b.HasBaseType("Domain.Contexts.ApplicationContext.Aggregates.VacancyApplication");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ResumeId");

                    b.HasDiscriminator().HasValue("WithCreatedResume");
                });

            modelBuilder.Entity("Domain.Contexts.ApplicationContext.Aggregates.VacancyApplication", b =>
                {
                    b.HasOne("Domain.Contexts.IdentityContext.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Contexts.JobPostingContext.Aggregates.Vacancy", null)
                        .WithMany()
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.IdentityContext.Aggregates.RefreshToken", b =>
                {
                    b.HasOne("Domain.Contexts.IdentityContext.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.JobPostingContext.Aggregates.Vacancy", b =>
                {
                    b.HasOne("Domain.Contexts.JobPostingContext.Aggregates.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Contexts.RecruitmentContext.Aggregates.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.RecruitmentContext.Aggregates.CompanyUser", b =>
                {
                    b.HasOne("Domain.Contexts.RecruitmentContext.Aggregates.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Contexts.IdentityContext.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Aggregates.Resume", b =>
                {
                    b.HasOne("Domain.Contexts.IdentityContext.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Entities.Education", b =>
                {
                    b.HasOne("Domain.Contexts.ResumePostingContext.Aggregates.Resume", null)
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Entities.LanguageSkill", b =>
                {
                    b.HasOne("Domain.Contexts.ResumePostingContext.Aggregates.Resume", null)
                        .WithMany("Languages")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Entities.WorkExperience", b =>
                {
                    b.HasOne("Domain.Contexts.ResumePostingContext.Aggregates.Resume", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.ApplicationContext.Aggregates.ResumeVacancyApplication", b =>
                {
                    b.HasOne("Domain.Contexts.ResumePostingContext.Aggregates.Resume", null)
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Contexts.ResumePostingContext.Aggregates.Resume", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Languages");

                    b.Navigation("WorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
